# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:37:42+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import (
    AnyUrl,
    BaseModel,
    Field,
    PositiveInt,
    RootModel,
    confloat,
    conint,
    constr,
)


class BodyCreate(BaseModel):
    file: bytes = Field(..., title='File')


class BoundingBox(BaseModel):
    height: confloat(ge=1.0) = Field(..., title='Height')
    width: confloat(ge=1.0) = Field(..., title='Width')
    x: confloat(ge=0.0) = Field(..., title='X')
    y: confloat(ge=0.0) = Field(..., title='Y')


class Type(Enum):
    check = 'check'


class CheckBoxField(BaseModel):
    bbox: BoundingBox
    eval: Optional[Union[bool, constr(min_length=1)]] = Field(True, title='Eval')
    name: constr(min_length=1) = Field(..., title='Name')
    page: conint(ge=0) = Field(..., title='Page')
    required: Optional[bool] = Field(True, title='Required')
    type: Literal['check'] = Field(..., title='Type')


class Type1(Enum):
    date = 'date'


class FillTemplateRequest(BaseModel):
    data: Optional[Dict[str, Any]] = Field({}, title='Data')


class Font(Enum):
    courier = 'courier'
    helvetica = 'helvetica'
    times_roman = 'times_roman'


class Format(Enum):
    a0 = 'a0'
    a1 = 'a1'
    a2 = 'a2'
    a3 = 'a3'
    a4 = 'a4'
    a5 = 'a5'
    a6 = 'a6'


class GeneratePDFPayload(BaseModel):
    data: Dict[str, Any] = Field(..., title='Data')


class HorizontalAlign(Enum):
    L = 'L'
    C = 'C'
    R = 'R'


class ImageAnchor(Enum):
    nw = 'nw'
    n = 'n'
    ne = 'ne'
    w = 'w'
    c = 'c'
    e = 'e'
    sw = 'sw'
    s = 's'


class Type2(Enum):
    image = 'image'


class ImageField(BaseModel):
    anchor: Optional[ImageAnchor] = 'c'
    bbox: BoundingBox
    name: constr(min_length=1) = Field(..., title='Name')
    page: conint(ge=0) = Field(..., title='Page')
    required: Optional[bool] = Field(True, title='Required')
    type: Literal['image'] = Field(..., title='Type')


class Orientation(Enum):
    landscape = 'landscape'
    portrait = 'portrait'


class PreviewModel(BaseModel):
    css: str = Field(..., title='Css')
    data: Dict[str, Any] = Field(..., title='Data')
    footer_html: Optional[str] = Field(None, title='Footer Html')
    header_html: Optional[str] = Field(None, title='Header Html')
    template_html: str = Field(..., title='Template Html')


class PreviewResponse(BaseModel):
    html: str = Field(..., title='Html')


class ResponseError(BaseModel):
    message: str = Field(..., title='Message')


class ResponseOkHttpUrl(BaseModel):
    results: AnyUrl = Field(..., title='Results')


class ResponseOkNoneType(BaseModel):
    results: Any = Field(..., title='Results')


class ResponseOkPreviewResponse(BaseModel):
    results: PreviewResponse


class Type3(Enum):
    text = 'text'


class VerticalAlign(Enum):
    T = 'T'
    C = 'C'
    B = 'B'


class CreateOrUpdateTemplateRequest(BaseModel):
    components: List[Dict[str, Any]] = Field(..., title='Components')
    css: str = Field(..., title='Css')
    footer_html: Optional[str] = Field(None, title='Footer Html')
    format: Format
    header_html: Optional[str] = Field(None, title='Header Html')
    name: str = Field(..., title='Name')
    orientation: Orientation
    preview_payload: Dict[str, Any] = Field(..., title='Preview Payload')
    template_html: str = Field(..., title='Template Html')


class DateField(BaseModel):
    bbox: BoundingBox
    cell_count: Optional[conint(ge=0)] = Field(0, title='Cell Count')
    cell_offset: Optional[conint(ge=0)] = Field(0, title='Cell Offset')
    cells: Optional[bool] = Field(False, title='Cells')
    color: Optional[str] = Field('black', title='Color')
    font: Optional[Font] = 'helvetica'
    font_size: Optional[PositiveInt] = Field(10, title='Font Size')
    format: str = Field(..., title='Format')
    h_align: Optional[HorizontalAlign] = 'L'
    locale: Optional[constr(min_length=5, max_length=5)] = Field(
        'en_US', title='Locale'
    )
    name: constr(min_length=1) = Field(..., title='Name')
    page: conint(ge=0) = Field(..., title='Page')
    required: Optional[bool] = Field(True, title='Required')
    type: Literal['date'] = Field(..., title='Type')
    v_align: Optional[VerticalAlign] = 'B'


class DesignerTemplate(BaseModel):
    components: List[Dict[str, Any]] = Field(..., title='Components')
    created_at: Optional[datetime] = Field(None, title='Created At')
    css: str = Field(..., title='Css')
    footer_html: Optional[str] = Field(None, title='Footer Html')
    format: Format
    header_html: Optional[str] = Field(None, title='Header Html')
    id: Optional[str] = Field(None, title='Id')
    name: str = Field(..., title='Name')
    orientation: Orientation
    preview_payload: Dict[str, Any] = Field(..., title='Preview Payload')
    template_html: str = Field(..., title='Template Html')


class ResponseOkDesignerTemplate(BaseModel):
    results: DesignerTemplate


class ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate(BaseModel):
    results: List[DesignerTemplate] = Field(..., title='Results')


class TextField(BaseModel):
    bbox: BoundingBox
    cell_count: Optional[conint(ge=0)] = Field(0, title='Cell Count')
    cell_offset: Optional[conint(ge=0)] = Field(0, title='Cell Offset')
    cells: Optional[bool] = Field(False, title='Cells')
    color: Optional[str] = Field('black', title='Color')
    font: Optional[Font] = 'helvetica'
    font_size: Optional[PositiveInt] = Field(10, title='Font Size')
    h_align: Optional[HorizontalAlign] = 'L'
    name: constr(min_length=1) = Field(..., title='Name')
    page: conint(ge=0) = Field(..., title='Page')
    required: Optional[bool] = Field(True, title='Required')
    type: Literal['text'] = Field(..., title='Type')
    v_align: Optional[VerticalAlign] = 'B'


class Fields(RootModel[Union[DateField, TextField, ImageField, CheckBoxField]]):
    root: Union[DateField, TextField, ImageField, CheckBoxField] = Field(
        ..., discriminator='type'
    )


class UpdateTemplateRequest(BaseModel):
    fields: List[Fields] = Field(..., title='Fields')
    name: Optional[str] = Field(None, title='Name')


class Template(BaseModel):
    created_at: Optional[datetime] = Field(None, title='Created At')
    fields: Optional[List[Fields]] = Field([], title='Fields')
    id: Optional[str] = Field(None, title='Id')
    name: Optional[str] = Field(None, title='Name')
    pages: PositiveInt = Field(..., title='Pages')
    size_bytes: Optional[int] = Field(None, title='Size Bytes')


class ResponseOkListAppsApiRoutesTemplatesTemplate(BaseModel):
    results: List[Template] = Field(..., title='Results')


class ResponseOkTemplate(BaseModel):
    results: Template
