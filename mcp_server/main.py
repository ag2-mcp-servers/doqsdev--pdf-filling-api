# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:37:42+00:00



import argparse
import json
import os
from typing import *
from typing import Any, Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import UploadFile
from pydantic import conint

from models import (
    CreateOrUpdateTemplateRequest,
    FillTemplateRequest,
    GeneratePDFPayload,
    PreviewModel,
    ResponseError,
    ResponseOkDesignerTemplate,
    ResponseOkHttpUrl,
    ResponseOkListAppsApiRoutesTemplatesTemplate,
    ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate,
    ResponseOkNoneType,
    ResponseOkPreviewResponse,
    ResponseOkTemplate,
    UpdateTemplateRequest,
)

app = MCPProxy(
    title='doqs.dev | PDF filling API',
    version='1.0',
    servers=[{'url': 'https://api.doqs.dev/v1'}],
)


@app.get(
    '/designer/templates/',
    tags=['template_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def list_templates_designer_templates__get(
    limit: Optional[conint(ge=1, le=1000)] = 100, offset: Optional[conint(ge=0)] = 0
):
    """
    List Templates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/designer/templates/',
    tags=['template_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def create_template_designer_templates__post(body: CreateOrUpdateTemplateRequest):
    """
    Create Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/designer/templates/preview',
    tags=['template_preview'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def preview_designer_templates_preview_post(body: PreviewModel):
    """
    Preview
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/designer/templates/{id}',
    tags=['template_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def delete_designer_templates__id__delete(id: str):
    """
    Delete
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/designer/templates/{id}',
    tags=['template_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def list_templates_designer_templates__id__get(id: str):
    """
    List Templates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/designer/templates/{id}',
    tags=['template_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def update_template_designer_templates__id__put(
    id: str, body: CreateOrUpdateTemplateRequest = ...
):
    """
    Update Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/designer/templates/{id}/generate',
    tags=['template_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def generate_pdf_designer_templates__id__generate_post(
    id: str, body: GeneratePDFPayload = ...
):
    """
    Generate Pdf
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/templates',
    tags=['template_management', 'template_file_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def list(
    limit: Optional[conint(ge=1, le=1000)] = 100, offset: Optional[conint(ge=0)] = 0
):
    """
    List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/templates',
    tags=['template_management', 'template_file_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def create(file: UploadFile):
    """
    Create
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/templates/{id}',
    tags=['template_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def delete__templates__id__delete(id: str):
    """
    Delete
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/templates/{id}',
    tags=['template_management', 'template_file_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def get(id: str):
    """
    Get Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/templates/{id}',
    tags=['template_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def update(id: str, body: UpdateTemplateRequest = ...):
    """
    Update
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/templates/{id}/file',
    tags=['template_file_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def get_file_templates__id__file_get(id: str):
    """
    Get File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/templates/{id}/fill',
    tags=['template_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def fill(id: str, body: FillTemplateRequest = ...):
    """
    Fill
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
